name: DevSecOps for a Polygot Application
on:
  push:                                       
    branches:                              
      - main

jobs:
  secret-scanning:
    name: SecretScanning-Python-Truffle Hog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Truffle Hog
        run: docker run --rm -v $(pwd):/src hysnsec/trufflehog --json --regex --entropy=False file:///src > trufflehog-results.json
        continue-on-error: true
      
      - name: Upload the Output as an artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: Truffle Hog Output
          path: trufflehog-results.json
 

  docker-lint:
    name: LintChecking-Docker-Hadolint
    runs-on: ubuntu-latest
    needs: secret-scanning
    steps:
      - uses: actions/checkout@v3

      - name: Run Hadolint
        #run: docker run --rm -i hadolint/hadolint < Dockerfile | tee hadolint-result.txt
        run: docker run --rm -i hadolint/hadolint < Dockerfile | tee hadolint-result.json
             
      - name: Upload the artifacts
        uses: actions/upload-artifact@v3.1.1
        with:
          name: hadolint-result
          path: hadolint-result.json
          
  component-analysis:
    name: ComponentAnalysis-Node-NPMAudit
    runs-on: ubuntu-latest
    needs: docker-lint
    steps:
    - name: Checkout the Code
      uses: actions/checkout@v3
      
    - name: Install the Libraries or Node Modules
      uses: actions/setup-node@v3
      with:
        node-version: 12
        
    - name: Perform Node.js Audit and Output to Json file
      run: npm install &&
           npm install -g audit-ci &&
           audit-ci --report true --json ./audit-ci-report.json --config ./audit-ci.json >> reports.json
      continue-on-error: true
      
    - name: Perform Node.js Audit and Output to Json file
      run: |
       #!/bin/bash
       # Remove the first two lines of the file
       tail -n +3 reports.json > temp.json
       # Remove the last line of the file
       head -n -1 temp.json > NPMAuditReport.json
       # Clean up temporary file
       rm temp.json
          
    - name: Upload the Output as an artifact
      uses: actions/upload-artifact@v3.1.1
      with:
        name: Node-Audit-Output
        path: NPMAuditReport.json
      if: always() 

# Build with Sleep Statement
  build:
    name: Build Stage
    runs-on: ubuntu-latest
    needs: component-analysis
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10

# Functional Testing with Sleep Statement
  functional-testing:
    name: Functional Testing Stage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10 
         
  nikto-scan:
    name: Nikto Scan
    runs-on: ubuntu-latest
    needs: nmap-scan      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install Nikto
      run: |
       sudo apt-get update
       sudo apt-get install nikto
       #git clone https://github.com/sullo/nikto
       #cd nikto/program
       #./nikto.pl -h 34.123.201.87 -T webservers -maxtime 1800 -Format json -o nikto-results.json
       
    #- name: Create Nikto artifact directory
    #  run: mkdir nikto-artifacts
           
    - name: Run Nikto scan
      run: nikto -h 34.123.201.87 -o scan.xml
      #run: nikto -h 34.123.201.87 -Format json -output 'nikto-output.json'
      # run: nikto -h 34.123.201.87 -Format json -o nikto-artifacts/nikto.json
      
    - name: Create Nikto artifact
      uses: actions/upload-artifact@v3.1.1
      with:
       name: nikto-results
       path: scan.xml
   
  nmap-scan:
    name: NMAP Scan
    runs-on: ubuntu-latest
    needs: dev-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install NMAP
        run: sudo apt-get update && sudo apt-get install -y nmap
      - name: Run NMAP scan
        run: nmap -oX nmap-results.xml 34.123.201.87
      - name: Save NMAP results
        uses: actions/upload-artifact@v3.1.1
        with:
          name: nmap-results
          path: nmap-results.xml
          
  Trivy-scan:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    needs: functional-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
      
      - name: Scan image with Trivy
        run: |
          trivy image golang:latest --format json --output trivy-results.json
      
      - name: Upload results
        uses: actions/upload-artifact@v3.1.1
        with:
          name: trivy-results
          path: trivy-results.json   
          
       
  oast-frontend-retirejs:
    name: SAST-Frontend-Job-NodeJS-RetireJS
    runs-on: ubuntu-latest
    needs: functional-testing
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v2
        with:
          node-version: '10.x'

      - run: npm install

      - run: docker run --rm -v $(pwd):/src -w /src hysnsec/retire --outputformat json --outputpath retirejs-report.json --severity high
        continue-on-error: true

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: RetireJS
          path: retirejs-report.json
        if: always()                        
             
  export-scan-results:
    name: Export Scan Results
    runs-on: ubuntu-latest
    needs: [oast-frontend-retirejs, nmap-scan, nikto-scan, Trivy-scan]
    steps:
      - uses: actions/checkout@master
      
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: Bandit Output
          # Destination path
          path: .

      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: RetireJS
          # Destination path
          path: .
          
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: nikto-results
          # Destination path
          path: .
          
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: nmap-results
          # Destination path
          path: .
     
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: trivy-results
          # Destination path
          path: .
          
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: Node-Audit-Output
          # Destination path
          path: .    
          
      - name: Run Import 
        run: |
          chmod 755 test-run-import.sh
          bash test-run-import.sh
                
  dev-deployment:
    name: DevDeployment
    runs-on: ubuntu-latest
    needs: [oast-frontend-retirejs, export-scan-results, Trivy-scan, nmap-scan, nikto-scan, component-analysis    ]
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10

  preprod-deployment:
    name: PreProdDeployment
    runs-on: ubuntu-latest
    needs: dev-deployment
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10
  
  prod-deployment:
    name: ProdDeployment
    runs-on: ubuntu-latest
    needs: preprod-deployment
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10
