name: DevSecOps for a Polygot Application
on:
  push:                                       
    branches:                              
      - main

jobs:
  secret-scanning:
    name: SecretScanning-Python-Truffle Hog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Truffle Hog
        run: docker run --rm -v $(pwd):/src hysnsec/trufflehog --json --regex --entropy=False file:///src > trufflehog-results.json
        continue-on-error: true
      
      - name: Upload the Output as an artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: Truffle Hog Output
          path: trufflehog-results.json
 

  docker-lint:
    name: LintChecking-Docker-Hadolint
    runs-on: ubuntu-latest
    needs: secret-scanning
    steps:
      - uses: actions/checkout@v3

      - name: Run Hadolint
        #run: docker run --rm -i hadolint/hadolint < Dockerfile | tee hadolint-result.txt
        run: docker run --rm -i hadolint/hadolint < Dockerfile | tee hadolint-result.json
             
      - name: Upload the artifacts
        uses: actions/upload-artifact@v3.1.1
        with:
          name: hadolint-result
          path: hadolint-result.json
          
  component-analysis:
    name: ComponentAnalysis-Node-NPMAudit
    runs-on: ubuntu-latest
    needs: docker-lint
    steps:
    - name: Checkout the Code
      uses: actions/checkout@v3
      
    - name: Install the Libraries or Node Modules
      run: npm install -g npm@6
      #run: nvm install 6
      #     npm install
      #run: npm i --package-lock-only
          # npm config get package-lock
          # npm config get shrinkwrap
          # npm i --package-lock-only
          # npm audit fix
                      
    - name: Perform Node.js Audit and Output to Json file
      run: npm@6 audit --json > node-audit-results.json
      continue-on-error: true
      
    -  name: List the files available
       run: ls
       
    - name: Upload the Output as an artifact
      uses: actions/upload-artifact@v3.1.1
      with:
        name: Node-Audit-Output
        path: node-audit-results.json
      if: always() 

# Build with Sleep Statement
  build:
    name: Build Stage
    runs-on: ubuntu-latest
    needs: component-analysis
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10

# Functional Testing with Sleep Statement
  functional-testing:
    name: Functional Testing Stage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10

  # build:
  #   name: Build-Job-Python
  #   runs-on: ubuntu-latest
  #   needs : docker-lint
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setup python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3'
  #       continue-on-error: true

  #     - run: |
  #         pip3 install --upgrade virtualenv
  #         virtualenv env
  #         source env/bin/activate
  #         pip install -r requirements.txt
  #         python manage.py check
  #       continue-on-error: true
  
  # test:
  #   name: FunctionalTesting-Job-Python
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setup python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.6'

  #     - run: |
  #         pip3 install --upgrade virtualenv
  #         virtualenv env
  #         source env/bin/activate
  #         pip install -r requirements.txt
  #         python manage.py test taskManager

  oast-backend-safety:
    name: SAST-Backend-Job-Python-Safety
    runs-on: ubuntu-latest
    needs: functional-testing
    steps:
      - uses: actions/checkout@v3

      - run: docker run --rm -v $(pwd):/src hysnsec/safety check -r requirements.txt --json | tee oast-results.json
        continue-on-error: true             # allow the build to fail, similar to "allow_failure: true" in GitLab

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: Safety
          path: oast-results.json
        if: always()                        # what is this for

  oast-backend-bandit:
    name: SAST-Backend-Job-Python-Bandit
    runs-on: ubuntu-latest
    needs: functional-testing
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Run Bandit
        run: docker run --rm -v $(pwd):/src hysnsec/bandit -r /src -f json > bandit-results.json
        continue-on-error: true

      - name: Upload the Output as an artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: Bandit Output
          path: bandit-results.json
  
         
  nikto-scan:
    name: Nikto Scan
    runs-on: ubuntu-latest
    needs: functional-testing       
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install Nikto
      run: |
       sudo apt-get update
       sudo apt-get install nikto
       #git clone https://github.com/sullo/nikto
       #cd nikto/program
       #./nikto.pl -h 34.123.201.87 -o nikto.json
       
    #- name: Create Nikto artifact directory
    #  run: mkdir nikto-artifacts
           
    - name: Run Nikto scan
      run: nikto -h 34.123.201.87 -o scan.xml
      #run: nikto -h 34.123.201.87 -Format json -output 'nikto-output.json'
      # run: nikto -h 34.123.201.87 -Format json -o nikto-artifacts/nikto.json
      
    - name: Create Nikto artifact
      uses: actions/upload-artifact@v3.1.1
      with:
       name: nikto-results
       path: scan.xml
   
  nmap-scan:
    name: NMAP Scan
    runs-on: ubuntu-latest
    needs: functional-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install NMAP
        run: sudo apt-get update && sudo apt-get install -y nmap
      - name: Run NMAP scan
        run: nmap -oX nmap-results.xml 34.123.201.87
      - name: Save NMAP results
        uses: actions/upload-artifact@v3.1.1
        with:
          name: nmap-results
          path: nmap-results.xml
          
  Yarn-Audit-Scan:
    name: Yarn Audit Scan
    runs-on: ubuntu-latest
    needs: functional-testing
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: purge Node.js 18.x
        run: |
         sudo apt-get remove --purge nodejs
      
      - name: Install Node.js 14.x
        run: |
          curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node --version
      - name: Install Yarn
        run: sudo npm install -g yarn
      
      - name: Install Dependencies
        run: yarn install
      
      - name: Run Yarn Audit
        run: yarn audit --json > report.json

      

  #hydra_scan:
   # name: Hydra Scan and Artifact
    #runs-on: ubuntu-latest
    #steps:
    #- name: Checkout code
    #  uses: actions/checkout@v2
  
    #- name: Install Hydra
     # run: |
      # sudo apt-get update
      # sudo apt-get install -y hydra
    #- name: Run Hydra scan
     # run: |
      # hydra -L /home/ubuntu/Hydra/usernames.txt -P /home/ubuntu/Hydra/passwords.txt ftp://3.108.44.52:8080
       #hydra -L /home/ubuntu/Hydra/usernames.txt -P /home/ubuntu/Hydra/passwords.txt ssh://3.108.44.52:8080
       #hydra -L /home/ubuntu/Hydra/usernames.txt -P /home/ubuntu/Hydra/passwords.txt smtp://3.108.44.52:8080
       
    #- name: Save Hydra output as JSON artifact   
    #  uses: actions/upload-artifact@v2
     # with:
      # name: hydra-scan-results
      # path: hydra.json
       
  oast-frontend-retirejs:
    name: SAST-Frontend-Job-NodeJS-RetireJS
    runs-on: ubuntu-latest
    needs: functional-testing
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v2
        with:
          node-version: '10.x'

      - run: npm install

      - run: docker run --rm -v $(pwd):/src -w /src hysnsec/retire --outputformat json --outputpath retirejs-report.json --severity high
        continue-on-error: true

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: RetireJS
          path: retirejs-report.json
        if: always()                        # what is this for

  oast-snyk:
    name: SecretScanning-NodeJS-Synk
    runs-on: ubuntu-latest
    needs: functional-testing
    steps:
      - uses: actions/checkout@master      
      - uses: snyk/actions/setup@master
      - uses: actions/setup-go@v1
        with:
          go-version: "1.13"

      - uses: actions/setup-node@v3.5.1
        with:
          node-version: '10.x'

      - name: Install Node modules
        run: npm install

      - name: Run Snyk
        run: snyk test --json > snyk-results.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - uses: actions/upload-artifact@v3.1.1
        with:
          name: Snyk               
          path: snyk-results.json
        if: always()
             
  export-scan-results:
    name: Export Scan Results
    runs-on: ubuntu-latest
    needs: [oast-backend-safety, oast-backend-bandit, oast-frontend-retirejs, oast-snyk, nmap-scan, nikto-scan]
    steps:
      - uses: actions/checkout@master
      
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: Bandit Output
          # Destination path
          path: .

      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: RetireJS
          # Destination path
          path: .
          
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: nikto-results
          # Destination path
          path: .
          
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          # Artifact name
          name: nmap-results
          # Destination path
          path: .
    
      - name: Run Import 
        run: |
          chmod 755 test-run-import.sh
          bash test-run-import.sh
                
  dev-deployment:
    name: DevDeployment
    runs-on: ubuntu-latest
    needs: [oast-backend-safety, oast-backend-bandit, oast-frontend-retirejs, oast-snyk, export-scan-results]
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10

  preprod-deployment:
    name: PreProdDeployment
    runs-on: ubuntu-latest
    needs: dev-deployment
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10
  
  prod-deployment:
    name: ProdDeployment
    runs-on: ubuntu-latest
    needs: preprod-deployment
    steps:
      - name: Sleep for 10 seconds
        run: sleep 10
